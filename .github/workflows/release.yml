name: Build and Release

on:
  push:
    branches: [main, 1-build-is-failing-needs-investigation-and-fix]

permissions:
  contents: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: |
          # Get latest tag or set to v0.0.0 if no tags exist
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Extract version numbers
          version=$(echo $latest_tag | sed 's/v//')
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)

          # Increment patch version
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
          echo "version=$new_tag" >> $GITHUB_OUTPUT
          echo "New tag will be: $new_tag"
        shell: bash

  build:
    needs: version
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: dump-tree-windows-x64.exe
          - os: ubuntu-latest
            platform: linux
            artifact_name: dump-tree-linux-x64-arm64.js
          - os: macos-latest
            platform: macos-x64
            artifact_name: dump-tree-macos-x64
          - os: macos-latest
            platform: macos-arm
            artifact_name: dump-tree-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (Windows)
        if: matrix.platform == 'windows'
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set up Python (MacOS)
        if: contains(matrix.platform, 'macos')
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          architecture: ${{ contains(matrix.platform, 'x64') && 'x64' || 'arm64' }}

      - name: Set up Node.js
        if: matrix.platform == 'linux'
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"

      - name: Install Linux Dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gjs \
            build-essential \
            gobject-introspection \
            libgirepository1.0-dev \
            libcairo2 \
            libcairo2-dev

      - name: Build Windows
        if: matrix.platform == 'windows'
        working-directory: win-ax
        run: |
          echo "Installing dependencies..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt --no-cache-dir
          python -m pip install pyinstaller --no-cache-dir

          echo "Building executable with PyInstaller..."
          python -m PyInstaller --onefile --noconfirm --clean --log-level INFO dump-tree.py
          if ($LASTEXITCODE -ne 0) {
            echo "PyInstaller failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

          echo "Verifying build output..."
          if (-not (Test-Path "dist/dump-tree.exe")) {
            echo "ERROR: PyInstaller did not create dist/dump-tree.exe"
            echo "Contents of dist directory:"
            Get-ChildItem dist/
            exit 1
          }

          echo "Copying build artifact..."
          Copy-Item -Path "dist/dump-tree.exe" -Destination "../${{ matrix.artifact_name }}"

          echo "Windows build completed successfully"
        shell: pwsh

      - name: Build Linux
        if: matrix.platform == 'linux'
        working-directory: linux-ax
        run: |
          npm install
          npm run build
          cp dist/dump-tree.js ../${{ matrix.artifact_name }}

      - name: Build macOS
        if: contains(matrix.platform, 'macos')
        working-directory: mac-ax
        run: |
          cd macapptree
          if [ "${{ matrix.platform }}" = "macos-arm" ]; then
            ARCH_FLAG="--target-arch arm64"
            pip install -r requirements.txt
            cd ..
            pip install -r requirements.txt
            pip install pyinstaller
            # Force pip to install packages matching target architecture
            pip install --force-reinstall --only-binary :all: pillow
            pyinstaller --add-data "./macapptree/macapptree:macapptree" --noconfirm --onefile $ARCH_FLAG dump-tree.py
          else
            ARCH_FLAG="--target-arch x86_64"
            arch --x86_64 pip install -r requirements.txt
            cd ..
            arch --x86_64 pip install -r requirements.txt
            arch --x86_64 pip install pyinstaller
            # Force pip to install packages matching target architecture
            arch --x86_64 pip install --force-reinstall --only-binary :all: pillow
            arch --x86_64 pyinstaller --add-data "./macapptree/macapptree:macapptree" --noconfirm --onefile $ARCH_FLAG dump-tree.py
          fi
          cp dist/dump-tree ../${{ matrix.artifact_name }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          compression-level: 0

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Prepare Release Files
        run: |
          mkdir -p release_files

          echo "Copying Windows executable..."
          cp "artifacts/dump-tree-windows-x64.exe/dump-tree-windows-x64.exe" release_files/ || {
            echo "Failed to copy Windows executable"
            exit 1
          }

          echo "Copying Linux script..."
          cp "artifacts/dump-tree-linux-x64-arm64.js/dump-tree-linux-x64-arm64.js" release_files/ || {
            echo "Failed to copy Linux script"
            exit 1
          }

          echo "Copying macOS x64 binary..."
          cp "artifacts/dump-tree-macos-x64/dump-tree-macos-x64" release_files/ || {
            echo "Failed to copy macOS x64 binary"
            exit 1
          }

          echo "Copying macOS arm64 binary..."
          cp "artifacts/dump-tree-macos-arm64/dump-tree-macos-arm64" release_files/ || {
            echo "Failed to copy macOS arm64 binary"
            exit 1
          }

          echo "Release files prepared:"
          ls -la release_files/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.version }}
          name: Release ${{ needs.version.outputs.version }}
          draft: false
          prerelease: false
          files: release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
